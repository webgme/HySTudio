/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Wed Dec 12 2018 16:14:30 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'hysteditor/HyST',
    'q'
], function (PluginConfig,
             pluginMetadata,
             PluginBase,
             HyST,
             Q) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of ExportSpaceEx.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin ExportSpaceEx.
     * @constructor
     */
    function ExportSpaceEx() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    ExportSpaceEx.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    ExportSpaceEx.prototype = Object.create(PluginBase.prototype);
    ExportSpaceEx.prototype.constructor = ExportSpaceEx;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    ExportSpaceEx.prototype.main = function (callback) {
        var self = this,
            core = self.core,
            bc = self.blobClient,
            model = self.activeNode;

        core.loadSubTree(model)
            .then(function (nodes) {
                var nodeCache = {},
                    modelObject = {};

                nodes.forEach(function (node) {
                    nodeCache[core.getPath(node)] = node;
                });

                core.getChildrenPaths(model).forEach(function (childPath) {
                    if (core.isInstanceOf(nodeCache[childPath], self.META.BaseComponent)) {
                        self._saveBaseComponent(modelObject, nodeCache, nodeCache[childPath]);
                    }

                    if (core.isInstanceOf(nodeCache[childPath], self.META.NetworkComponent)) {
                        self._saveNetworkComponent(modelObject, nodeCache, nodeCache[childPath]);
                    }
                });

                self._result = {};
                self._result.filename = core.getAttribute(model, 'name') + '.xml';
                self._result.content = HyST.jsonToSpaceEx(modelObject);
                return bc.putFile(self._result.filename, self._result.content);
            })
            .then(function (fileHash) {
                self.result.addArtifact(fileHash);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                callback(err, self.result);
            });
    };

    ExportSpaceEx.prototype._saveParameter = function (serializedContainerObject, nodeCache, node) {
        var self = this,
            core = self.core,
            attribute,
            parameter = {};

        attribute = core.getOwnAttribute(node, 'name');
        HyST.setAttribute(parameter, 'name', attribute);

        attribute = core.getOwnAttribute(node, 'type');
        if (attribute) {
            HyST.setAttribute(parameter, 'type', attribute);
        }

        attribute = core.getOwnAttribute(node, 'local');
        if (typeof attribute === 'boolean') {
            HyST.setAttribute(parameter, 'local', attribute);
        }

        attribute = core.getOwnAttribute(node, 'd1');
        if (typeof attribute === 'number') {
            HyST.setAttribute(parameter, 'd1', attribute);
        }

        attribute = core.getOwnAttribute(node, 'd2');
        if (typeof attribute === 'number') {
            HyST.setAttribute(parameter, 'd2', attribute);
        }

        attribute = core.getOwnAttribute(node, 'dynamics');
        if (attribute) {
            HyST.setAttribute(parameter, 'dynamics', attribute);
        }

        attribute = core.getOwnAttribute(node, 'controlled');
        if (typeof attribute === 'boolean') {
            HyST.setAttribute(parameter, 'controlled', attribute ? 'true' : 'false');
        }

        serializedContainerObject.param = serializedContainerObject.param || [];
        serializedContainerObject.param.push(parameter);
    };

    ExportSpaceEx.prototype._saveLocation = function (serializedContainerObject, nodeCache, node) {
        var self = this,
            core = self.core,
            attribute,
            location = {};

        attribute = core.getRelid(node);
        if (attribute) {
            HyST.setAttribute(location, 'id', attribute);
        }

        attribute = core.getAttribute(node, 'name');
        HyST.setAttribute(location, 'name', attribute);

        attribute = core.getRegistry(node, 'position');
        if (!isNan(Number(attribute.x))) {
            HyST.setAttribute(location, 'x', attribute.x);
        }
        if (!isNan(Number(attribute.y))) {
            HyST.setAttribute(location, 'y', attribute.y);
        }

        attribute = core.getRegistry(node, 'decoratorHeight');
        if (!isNan(Number(attribute))) {
            HyST.setAttribute(location, 'height', attribute);
        }

        attribute = core.getRegistry(node, 'decoratorWidth');
        if (!isNan(Number(attribute))) {
            HyST.setAttribute(location, 'width', attribute);
        }

        attribute = core.getAttribute(node, 'invariant');
        if (attribute) {
            location.invariant = {};
            HyST.setContent(location.invariant, attribute);
        }

        attribute = core.getAttribute(node, 'flow');
        if (attribute) {
            location.flow = {};
            HyST.setContent(location.flow, attribute);
        }

        attribute = core.getAttribute(node, 'initial');
        if (attribute) {
            location.initial = {};
            HyST.setContent(location.initial, attribute);
        }

        serializedContainerObject.location = serializedContainerObject.location || [];
        serializedContainerObject.location.push(location);
    };

    ExportSpaceEx.prototype._saveTransition = function (serializedContainerObject, nodeCache, node) {
        var self = this,
            core = self.core,
            name,
            attribute,
            transition = {};

        attribute = core.getPointerPath(node, 'src');
        if (attribute) {
            attribute = core.getRelid(nodeCache[attribute]);
            HyST.setAttribute(transition, 'source', attribute);
        }

        attribute = core.getPointerPath(node, 'dst');
        if (attribute) {
            attribute = core.getRelid(nodeCache[attribute]);
            HyST.setAttribute(transition, 'target', attribute);
        }

        name = core.getOwnAttribute(node, 'name');
        if (name) {
            transition.label = {};
            HyST.setContent(transition.label, name);
        }


        attribute = core.getOwnAttribute(node, 'guard');
        if (attribute) {
            transition.guard = {};
            HyST.setContent(transition.guard, attribute);
        }

        attribute = core.getOwnAttribute(node, 'assignment');
        if (attribute) {
            transition.assignment = {};
            HyST.setContent(transition.assignment, attribute);
        }

        attribute = core.getRegistry(node, 'position');
        if (attribute) {
            transition.labelposition = {};
            HyST.setAttribute(transition.labelposition, 'x', attribute.x);
            HyST.setAttribute(transition.labelposition, 'y', attribute.y);
        }

        serializedContainerObject.transition = serializedContainerObject.transition || [];
        serializedContainerObject.transition.push(transition);
    };

    ExportSpaceEx.prototype._saveBinding = function (serializedContainerObject, nodeCache, node, bindHash) {
        var self = this,
            core = self.core,
            attribute,
            binding = {};

        HyST.setAttribute(binding, 'component', core.getAttribute(core.getBase(node), 'name'));
        HyST.setAttribute(binding, 'as', core.getAttribute(node, 'name'));

        attribute = core.getRegistry(node, 'position');
        if (!isNan(Number(attribute.x))) {
            HyST.setAttribute(binding, 'x', attribute.x);
        }
        if (!isNan(Number(attribute.y))) {
            HyST.setAttribute(binding, 'y', attribute.y);
        }

        attribute = core.getRegistry(node, 'decoratorHeight');
        if (!isNan(Number(attribute))) {
            HyST.setAttribute(binding, 'height', attribute);
        }

        attribute = core.getRegistry(node, 'decoratorWidth');
        if (!isNan(Number(attribute))) {
            HyST.setAttribute(binding, 'width', attribute);
        }

        serializedContainerObject.bind = serializedContainerObject.bind || [];
        bindHash[core.getAttribute(node, 'name')] = serializedContainerObject.bind.length;
        serializedContainerObject.bind.push(binding);
    };

    ExportSpaceEx.prototype._saveMapping = function (serializedContainerObject, nodeCache, node, bindHash) {
        var self = this,
            core = self.core,
            attribute,
            mapping = {},
            templateName,
            binding, src, dst;

        src = nodeCache[core.getPointerPath(node, 'src')];
        dst = nodeCache[core.getPointerPath(node, 'dst')];
        templateName = core.getAttribute(core.getParent(src), 'name');
        binding = serializedContainerObject.bind[bindHash[templateName]];

        HyST.setAttribute(mapping, 'key', core.getAttribute(src, 'name'));

        if (core.isTypeOf(dst, self.META.Parameter)) {
            HyST.setContent(mapping, core.getAttribute(dst, 'name'));
        } else if (core.isTypeOf(dst, self.META.Constant)) {
            HyST.setContent(mapping, core.getAttribute(dst, 'value'));
        }

        binding.map = binding.map || [];
        binding.map.push(mapping);
    };

    ExportSpaceEx.prototype._saveBaseComponent = function (serializedContainerObject, nodeCache, node) {
        var self = this,
            core = self.core,
            component = {};


        HyST.setAttribute(component, 'id', core.getAttribute(node, 'name'));

        core.getChildrenPaths(node).forEach(function (childPath) {
            if (core.isInstanceOf(nodeCache[childPath], self.META.Parameter)) {
                self._saveParameter(component, nodeCache, nodeCache[childPath]);
            }
        });
        core.getChildrenPaths(node).forEach(function (childPath) {
            if (core.isInstanceOf(nodeCache[childPath], self.META.Location)) {
                self._saveLocation(component, nodeCache, nodeCache[childPath]);
            }
        });
        core.getChildrenPaths(node).forEach(function (childPath) {
            if (core.isInstanceOf(nodeCache[childPath], self.META.Transition)) {
                self._saveTransition(component, nodeCache, nodeCache[childPath]);
            }
        });

        serializedContainerObject.component = serializedContainerObject.component || [];
        serializedContainerObject.component.push(component);
    };

    ExportSpaceEx.prototype._saveNetworkComponent = function (serializedContainerObject, nodeCache, node) {
        var self = this,
            core = self.core,
            component = {},
            bindHash = {};

        HyST.setAttribute(component, 'id', core.getAttribute(node, 'name'));

        core.getChildrenPaths(node).forEach(function (childPath) {
            if (core.isInstanceOf(nodeCache[childPath], self.META.Parameter)) {
                self._saveParameter(component, nodeCache, nodeCache[childPath]);
            }
        });

        core.getChildrenPaths(node).forEach(function (childPath) {
            if (core.isInstanceOf(nodeCache[childPath], self.META.Component)) {
                self._saveBinding(component, nodeCache, nodeCache[childPath], bindHash);
            }
        });

        core.getChildrenPaths(node).forEach(function (childPath) {
            if (core.isInstanceOf(nodeCache[childPath], self.META.Mapping)) {
                self._saveMapping(component, nodeCache, nodeCache[childPath], bindHash);
            }
        });

        serializedContainerObject.component = serializedContainerObject.component || [];
        serializedContainerObject.component.push(component);
    };

    return ExportSpaceEx;
});
