/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Wed Dec 12 2018 16:14:43 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (PluginConfig,
             pluginMetadata,
             PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of ExportSpaceExConfig.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin ExportSpaceExConfig.
     * @constructor
     */
    function ExportSpaceExConfig() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    ExportSpaceExConfig.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    ExportSpaceExConfig.prototype = Object.create(PluginBase.prototype);
    ExportSpaceExConfig.prototype.constructor = ExportSpaceExConfig;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    ExportSpaceExConfig.prototype.main = function (callback) {
        var self = this,
            core = self.core,
            bc = self.blobClient,
            config = self.activeNode,
            model = core.getParent(config),
            configFileHash,
            configText;

        configText = core.getAttribute(config, 'content');
        configFileHash = core.getAttribute(config, 'file');

        if (configText) {
            bc.putFile((core.getAttribute(model, 'name') || 'model') + '.cfg', configText)
                .then(function (hash) {
                    self.result.addArtifact(hash);
                    self.result.setSuccess(true);
                    callback(null, self.result);
                });
        } else if (configFileHash) {
            self.result.addArtifact(configFileHash);
            self.result.setSuccess(true);
            callback(null, self.result);
        } else {
            callback(new Error('Cannot export empty configuration.'));
        }

        //TODO - once the config is modelled this should be more sophisticated
    };

    return ExportSpaceExConfig;
});
