/*globals define*/

/**
 * Generated by RestRouterGenerator 2.2.0 from webgme on Wed Jan 02 2019 15:13:37 GMT-0600 (Central Standard Time).
 * To use in webgme add to gmeConfig.rest.components[HyST] = {
 *    mount: 'path/subPath',
 *    src: path.join(process.cwd(), './HyST'),
 *    options: {}
 * }
 * If you put this file in the root of your directory the above will expose the routes at
 * <host>/path/subPath, for example GET <host>/path/subPath/getExample will be routed to the getExample below.
 */

'use strict';

// http://expressjs.com/en/guide/routing.html
var express = require('express'),
    fs = require('fs'),
    router = express.Router();

/**
 * Called when the server is created but before it starts to listening to incoming requests.
 * N.B. gmeAuth, safeStorage and workerManager are not ready to use until the start function is called.
 * (However inside an incoming request they are all ensured to have been initialized.)
 *
 * @param {object} middlewareOpts - Passed by the webgme server.
 * @param {GmeConfig} middlewareOpts.gmeConfig - GME config parameters.
 * @param {GmeLogger} middlewareOpts.logger - logger
 * @param {function} middlewareOpts.ensureAuthenticated - Ensures the user is authenticated.
 * @param {function} middlewareOpts.getUserId - If authenticated retrieves the userId from the request.
 * @param {object} middlewareOpts.gmeAuth - Authorization module.
 * @param {object} middlewareOpts.safeStorage - Accesses the storage and emits events (PROJECT_CREATED, COMMIT..).
 * @param {object} middlewareOpts.workerManager - Spawns and keeps track of "worker" sub-processes.
 */
function initialize(middlewareOpts) {
    var logger = middlewareOpts.logger.fork('HyST'),
        ensureAuthenticated = middlewareOpts.ensureAuthenticated,
        getUserId = middlewareOpts.getUserId;

    logger.debug('initializing ...');

    // Ensure authenticated can be used only after this rule.
    router.use('*', function (req, res, next) {
        // TODO: set all headers, check rate limit, etc.

        // This header ensures that any failures with authentication won't redirect.
        res.setHeader('X-WebGME-Media-Type', 'webgme.v1');
        next();
    });

    // Use ensureAuthenticated if the routes require authentication. (Can be set explicitly for each route.)
    router.use('*', ensureAuthenticated);

    /*
    {
    "dReach": {
        "description": "Some description about the given analysis",
        "input": "dreach", // available ones "hycreate","flowstar","dreach","spaceex","hycomp"
        "dockerImage": "kecso/dreach:0.1.0", //the docker image that contains the analyzer
        "userOptions": null, //a regular plugin config that will be presented to the user
        "command": "blah", //the actual command that will be executed, $param will be replaced from userOptions and $input will be filled out properly
        "outputFormat": "archive", //TODO might extend in the future - archive collects the work directory and present to the user for download
    }
    }
     */
    router.get('/availableAnalyzers', function (req, res/*, next*/) {
        fs.readFile('config/hyst.analyzers.json', 'utf8', function (err, config) {

            if (err) {
                logger.error(err);
                res.sendStatus(404);
            } else {
                res.json(JSON.parse(config));
            }
        });
    });

    // router.patch('/patchExample', function (req, res/*, next*/) {
    //     res.sendStatus(200);
    // });
    //
    //
    // router.post('/postExample', function (req, res/*, next*/) {
    //     res.sendStatus(201);
    // });
    //
    // router.delete('/deleteExample', function (req, res/*, next*/) {
    //     res.sendStatus(204);
    // });
    //
    // router.get('/error', function (req, res, next) {
    //     next(new Error('error example'));
    // });

    logger.debug('ready');
}

/**
 * Called before the server starts listening.
 * @param {function} callback
 */
function start(callback) {
    callback();
}

/**
 * Called after the server stopped listening.
 * @param {function} callback
 */
function stop(callback) {
    callback();
}


module.exports = {
    initialize: initialize,
    router: router,
    start: start,
    stop: stop
};
