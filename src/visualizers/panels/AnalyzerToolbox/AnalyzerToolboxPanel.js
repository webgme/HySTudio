/*globals define, _, WebGMEGlobal*/
/*jshint browser: true*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu Jan 03 2019 20:58:44 GMT-0600 (Central Standard Time).
 */

define(['js/PanelBase/PanelBaseWithHeader',
    'js/PanelManager/IActivePanel',
    './AnalyzerToolboxControl',
    'js/logger'
], function (PanelBaseWithHeader,
             IActivePanel,
             AnalyzerToolboxControl,
             Logger) {
    'use strict';

    var AnalyzerToolboxPanel;

    AnalyzerToolboxPanel = function (layoutManager, params) {
        // var options = {};
        //set properties from options
        // options[PanelBaseWithHeader.OPTIONS.LOGGER_INSTANCE_NAME] = 'AnalyzerToolboxPanel';
        // options[PanelBaseWithHeader.OPTIONS.FLOATING_TITLE] = true;

        //call parent's constructor
        // PanelBaseWithHeader.apply(this, [options, layoutManager]);

        this.logger = Logger.create('gme:AnalyzerToolboxPanel', WebGMEGlobal.gmeConfig.client.log);

        this._client = params.client;

        //initialize UI
        this._initialize();

        this.logger.debug('ctor finished');
    };

    //inherit from PanelBaseWithHeader
    // _.extend(AnalyzerToolboxPanel.prototype, PanelBaseWithHeader.prototype);
    // _.extend(AnalyzerToolboxPanel.prototype, IActivePanel.prototype);

    AnalyzerToolboxPanel.prototype._initialize = function () {
        var self = this;

        this.control = new AnalyzerToolboxControl({
            logger: this.logger,
            client: this._client
        });

        this.onActivate();
    };

    /* OVERRIDE FROM WIDGET-WITH-HEADER */
    /* METHOD CALLED WHEN THE WIDGET'S READ-ONLY PROPERTY CHANGES */
    AnalyzerToolboxPanel.prototype.onReadOnlyChanged = function (isReadOnly) {
        //apply parent's onReadOnlyChanged
        PanelBaseWithHeader.prototype.onReadOnlyChanged.call(this, isReadOnly);

    };

    AnalyzerToolboxPanel.prototype.onResize = function (width, height) {
        this.logger.debug('onResize --> width: ' + width + ', height: ' + height);
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    AnalyzerToolboxPanel.prototype.destroy = function () {
        this.control.destroy();

        PanelBaseWithHeader.prototype.destroy.call(this);
        WebGMEGlobal.KeyboardManager.setListener(undefined);
        WebGMEGlobal.Toolbar.refresh();
    };

    AnalyzerToolboxPanel.prototype.onActivate = function () {
        this.control.onActivate();
        WebGMEGlobal.KeyboardManager.setListener(this.widget);
        WebGMEGlobal.Toolbar.refresh();
    };

    AnalyzerToolboxPanel.prototype.onDeactivate = function () {
        this.control.onDeactivate();
        WebGMEGlobal.KeyboardManager.setListener(undefined);
        WebGMEGlobal.Toolbar.refresh();
    };

    AnalyzerToolboxPanel.prototype.afterAppend = function () {
        //TODO should we need to do something here?
    };
    AnalyzerToolboxPanel.prototype.setContainerUpdateFn = function () {

    };
    AnalyzerToolboxPanel.prototype.setReadOnly = function () {

    };

    return AnalyzerToolboxPanel;
});
